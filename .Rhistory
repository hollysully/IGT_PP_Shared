library(usethis)
use_git()
library(usethis)
use_git()
use_git()
use_git()
usegithub()
library(usethis)
use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
use_github()
library(dplyr)
library(tidyverse)
setwd("/Volumes/T8/Tread/Adult_DTI/")
# read in the subject numbers; Here I used colClasses="character" so that the leading zeros would not be suppressed
subj_ids <- read.table(("/Volumes/T8/Tread/Adult_DTI/Behav_Dat/AdultSubNums.txt"), header = FALSE, colClasses="character")
# read in the subject numbers; Here I used colClasses="character" so that the leading zeros would not be suppressed
subj_ids <- read.table(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/AdultSubNums.txt"), header = FALSE, colClasses="character")
# Get number of subjects
n_subj <- length(subj_ids)
library(dplyr)
library(tidyverse)
setwd("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/")
#import T1 subject list data
# this is the list of subjects I created based on the data I had
# Note:  "character" keeps the leading zeros in the sub nums
T1subs = as.data.frame(t(read.table(("AdultSubNums_T1.txt"), header = FALSE, colClasses="character")))
View(T1subs)
# Another list of the T1 subjects that was supplied to me by M. Treadway
# this list came from:  /Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_Data.xlsx
T1subs_fromSpreadsheet = as.data.frame(read.table(("AdultSubNums_T1_fromspreadsheet_copy.txt"), header = FALSE, colClasses="character"))
View(T1subs)
subj_ids <- unique(T1subs)
View(subj_ids)
n_subj <- length(subj_ids)
View(subj_ids)
subj_ids <- T1subs
n_subj <- length(subj_ids)
subj_ids <- t(T1subs)
n_subj <- length(subj_ids)
covar <- read.csv("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_Data.xlsx")
View(covar)
covar <- read.csv("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv")
View(covar)
covar <- read.csv("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv")
View(covar)
covar <- as.data.frame(read.table(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = FALSE, colClasses="character")))
covar <- as.data.frame(read.csv(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = FALSE, colClasses="character")))
covar <- read.csv(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = FALSE, colClasses="character")
View(covar)
covar <- read.csv(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = TRUE, colClasses="character")
View(covar)
View(covar)
View(T1subs)
colnames(T1subs)[1] <- "ID"
View(T1subs)
View(covar)
# merge
TBSS_subs_T1 <- merge(T1subs,covar,by="ID")
nrow(TBSS_subs_T1)
subj_ids <- t(TBSS_subs_T1)
subj_ids <- TBSS_subs_T1[1]
View(subj_ids)
n_subj <- length(subj_ids)
subj_ids <- t(TBSS_subs_T1[1])
n_subj <- length(subj_ids)
View(TBSS_subs_T1)
View(TBSS_subs_T1)
# Getting subject IDs and number of subjects from data
subj_ids <- t(TBSS_subs_T1[1])
n_subj <- length(subj_ids). # 53 subs
# Getting subject IDs and number of subjects from data
subj_ids <- t(TBSS_subs_T1[1])
n_subj <- length(subj_ids) # 53 subs
for (i in 1:n_subj) {
# Subset out current subject
tmp <- subset(TBSS_subs_T1, TBSS_subs_T1$ID==subj_ids[i])
# Group_Simple ==1 means highCRP = true
if (tmp$Group_Simple ==1) {
file.copy((paste('/Volumes/T8/Tread/Adult_DTI/',tmp$ID,'/dtifit/dtifit_output_FA.nii.gz',sep = "")), (paste('/Volumes/T8/Tread/Adult_DTI/TBSS_T1/','hcpr_',tmp$ID,'_','dtifit_output_FA.nii.gz',sep = "")), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
}
# Group_Simple ==2 means lowCRP = true
if (tmp$Group_Simple ==2) {
file.copy((paste('/Volumes/T8/Tread/Adult_DTI/',tmp$ID,'/dtifit/dtifit_output_FA.nii.gz',sep = "")), (paste('/Volumes/T8/Tread/Adult_DTI/TBSS_T1/','lcpr_',tmp$ID,'_','dtifit_output_FA.nii.gz',sep = "")), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
}
}
View(TBSS_subs_T1)
ordered_TBSS <- TBSS_subs_T1[order(TBSS_subs_T1$Group_Simple, TBSS_subs_T1$ID),]
View(ordered_TBSS)
length(ordered_TBSS[1])
length(ordered_TBSS[,1])
View(ordered_TBSS)
View(ordered_TBSS)
View(ordered_TBSS)
ordered_TBSS$Group_Simple[ordered_TBSS$Group_Simple == 2 ] <- 0
mean(ordered_TBSS$Age)
colMeans(ordered_TBSS$Age)
ordered_TBSS$Age
ordered_TBSS$Age <- as.numeric(ordered_TBSS$Age)
mean(ordered_TBSS$Age)
# create column for centered Age
ordered_TBSS["Age_c"] <- ordered_TBSS$Age - mean(ordered_TBSS$Age)
ordered_TBSS$Sex_Simple[ordered_TBSS$Sex_Simple == 1 ] <- 0
ordered_TBSS$Sex_Simple[ordered_TBSS$Sex_Simple == 2 ] <- 1
ordered_TBSS$Sex_Simple <- as.numeric(ordered_TBSS$Sex_Simple)
mean(ordered_TBSS$Sex_Simple)
# create column for centered Sex
ordered_TBSS["Sex_c"] <- ordered_TBSS$Sex_Simple - mean(ordered_TBSS$Sex_Simple)   # NOTE: mean sex_simple = 0.8867925
path_out = "/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/"
path_out = "/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/"
orderTBSS_dat = paste(path_out, 'orderTBSS_dat.csv', sep = '')
write.csv(ordered_TBSS,orderTBSS_dat)
# create an empty dataframe called design_mat
design_mat <- as.data.frame(matrix(ncol = 4, nrow = 53))
# 4 columns will represent the 4 EVs for the TBSS design matrix:
#   1 = High CRP
#   2 = Low CRP
#   3 = mean-centered age
#   4 = mean-centered sex
# for col 1 (High CRP):
# for assigning these values, you need to know how many subjects were  High CRP vs. Low CRP
# assign the first 38 rows (1st 38 subjects) a 1, indicating they're in High CRP group
design_mat[1:38, 1] <- 1
# assign the subjects 39:53 a 0, indicating they're not in High CRP group
design_mat[39:53, 1] <- 0
View(design_mat)
View(design_mat)
# for col 2 (NoMatHxDepr):
# for our design, this is just the reverse of col 1
# assign the first 38 rows (1st 38 subjects) a 0, indicating they're not in High CRP group
design_mat[1:38, 2] <- 0
# assign the subjects 39:53 a 1, indicating they're in Low CRP group
design_mat[39:53, 2] <- 1
# check the # of rows of design_mat
nrow(design_mat)
# for col 3 (mean-centered age):
design_mat[ , 3] <- ordered_TBSS$Age_c
# here is some guidance for demeaning sex or other binary predictors
# https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/GLM#Two_Groups_with_continuous_covariate_interaction
# for col 4 (mean-centered sex_code):
design_mat[ , 4] <- ordered_TBSS$Sex_c
path_out2 = "/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/1_DesignFiles1/"
design_mat_file = paste(path_out2, 'design_mat.txt', sep = '')
write.table(design_mat,design_mat_file, row.names=FALSE, col.names=FALSE)
############################################################################################################
# Make the design contrast file
############################################################################################################
# create a dataframe called design_con
design_con <- as.data.frame(matrix(ncol = 4, nrow = 6))
design_con[,] <- 0
design_con[1,1] <- 1
design_con[1,2] <- -1
design_con[2,2] <- 1
design_con[2,1] <- -1
design_con[3,3] <- 1
design_con[4,3] <- -1
design_con[5,4] <- 1
design_con[6,4] <- -1
# the first row of the contrast files means: Find voxels w/ more FA High CRP > Low CRP, controlling for age & sex
# the second row of the contrast files means: Find voxels w/ more FA Low CRP > High CRP, controlling for age & sex
# the third row of the contrast files means: Find a positive correlation with the third variable (mean-centered age), controlling for the other variables.
# the fourth row of the contrast files means: Find a negative correlation with the third variable (mean-centered age), controlling for the other variables.
# the fifth row of the contrast files means: Find a positive correlation with the forth variable (sex; 1 = female), controlling for the other variables.
# the sixth row of the contrast files means: Find a negative correlation with the forth variable (sex; 1 = female), controlling for the other variables.
design_con_file = paste(path_out2, 'design_con.txt', sep = '')
write.table(design_con,design_con_file, row.names=FALSE, col.names=FALSE)
