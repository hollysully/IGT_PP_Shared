library(usethis)
use_git()
library(usethis)
use_git()
use_git()
use_git()
usegithub()
library(usethis)
use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
use_github()
library(dplyr)
library(tidyverse)
setwd("/Volumes/T8/Tread/Adult_DTI/")
# read in the subject numbers; Here I used colClasses="character" so that the leading zeros would not be suppressed
subj_ids <- read.table(("/Volumes/T8/Tread/Adult_DTI/Behav_Dat/AdultSubNums.txt"), header = FALSE, colClasses="character")
# read in the subject numbers; Here I used colClasses="character" so that the leading zeros would not be suppressed
subj_ids <- read.table(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/AdultSubNums.txt"), header = FALSE, colClasses="character")
# Get number of subjects
n_subj <- length(subj_ids)
library(dplyr)
library(tidyverse)
setwd("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/")
#import T1 subject list data
# this is the list of subjects I created based on the data I had
# Note:  "character" keeps the leading zeros in the sub nums
T1subs = as.data.frame(t(read.table(("AdultSubNums_T1.txt"), header = FALSE, colClasses="character")))
View(T1subs)
# Another list of the T1 subjects that was supplied to me by M. Treadway
# this list came from:  /Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_Data.xlsx
T1subs_fromSpreadsheet = as.data.frame(read.table(("AdultSubNums_T1_fromspreadsheet_copy.txt"), header = FALSE, colClasses="character"))
View(T1subs)
subj_ids <- unique(T1subs)
View(subj_ids)
n_subj <- length(subj_ids)
View(subj_ids)
subj_ids <- T1subs
n_subj <- length(subj_ids)
subj_ids <- t(T1subs)
n_subj <- length(subj_ids)
covar <- read.csv("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_Data.xlsx")
View(covar)
covar <- read.csv("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv")
View(covar)
covar <- read.csv("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv")
View(covar)
covar <- as.data.frame(read.table(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = FALSE, colClasses="character")))
covar <- as.data.frame(read.csv(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = FALSE, colClasses="character")))
covar <- read.csv(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = FALSE, colClasses="character")
View(covar)
covar <- read.csv(("/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/Adult_T1_covar.csv"), header = TRUE, colClasses="character")
View(covar)
View(covar)
View(T1subs)
colnames(T1subs)[1] <- "ID"
View(T1subs)
View(covar)
# merge
TBSS_subs_T1 <- merge(T1subs,covar,by="ID")
nrow(TBSS_subs_T1)
subj_ids <- t(TBSS_subs_T1)
subj_ids <- TBSS_subs_T1[1]
View(subj_ids)
n_subj <- length(subj_ids)
subj_ids <- t(TBSS_subs_T1[1])
n_subj <- length(subj_ids)
View(TBSS_subs_T1)
View(TBSS_subs_T1)
# Getting subject IDs and number of subjects from data
subj_ids <- t(TBSS_subs_T1[1])
n_subj <- length(subj_ids). # 53 subs
# Getting subject IDs and number of subjects from data
subj_ids <- t(TBSS_subs_T1[1])
n_subj <- length(subj_ids) # 53 subs
for (i in 1:n_subj) {
# Subset out current subject
tmp <- subset(TBSS_subs_T1, TBSS_subs_T1$ID==subj_ids[i])
# Group_Simple ==1 means highCRP = true
if (tmp$Group_Simple ==1) {
file.copy((paste('/Volumes/T8/Tread/Adult_DTI/',tmp$ID,'/dtifit/dtifit_output_FA.nii.gz',sep = "")), (paste('/Volumes/T8/Tread/Adult_DTI/TBSS_T1/','hcpr_',tmp$ID,'_','dtifit_output_FA.nii.gz',sep = "")), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
}
# Group_Simple ==2 means lowCRP = true
if (tmp$Group_Simple ==2) {
file.copy((paste('/Volumes/T8/Tread/Adult_DTI/',tmp$ID,'/dtifit/dtifit_output_FA.nii.gz',sep = "")), (paste('/Volumes/T8/Tread/Adult_DTI/TBSS_T1/','lcpr_',tmp$ID,'_','dtifit_output_FA.nii.gz',sep = "")), overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE, copy.date = FALSE)
}
}
View(TBSS_subs_T1)
ordered_TBSS <- TBSS_subs_T1[order(TBSS_subs_T1$Group_Simple, TBSS_subs_T1$ID),]
View(ordered_TBSS)
length(ordered_TBSS[1])
length(ordered_TBSS[,1])
View(ordered_TBSS)
View(ordered_TBSS)
View(ordered_TBSS)
ordered_TBSS$Group_Simple[ordered_TBSS$Group_Simple == 2 ] <- 0
mean(ordered_TBSS$Age)
colMeans(ordered_TBSS$Age)
ordered_TBSS$Age
ordered_TBSS$Age <- as.numeric(ordered_TBSS$Age)
mean(ordered_TBSS$Age)
# create column for centered Age
ordered_TBSS["Age_c"] <- ordered_TBSS$Age - mean(ordered_TBSS$Age)
ordered_TBSS$Sex_Simple[ordered_TBSS$Sex_Simple == 1 ] <- 0
ordered_TBSS$Sex_Simple[ordered_TBSS$Sex_Simple == 2 ] <- 1
ordered_TBSS$Sex_Simple <- as.numeric(ordered_TBSS$Sex_Simple)
mean(ordered_TBSS$Sex_Simple)
# create column for centered Sex
ordered_TBSS["Sex_c"] <- ordered_TBSS$Sex_Simple - mean(ordered_TBSS$Sex_Simple)   # NOTE: mean sex_simple = 0.8867925
path_out = "/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/"
path_out = "/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/"
orderTBSS_dat = paste(path_out, 'orderTBSS_dat.csv', sep = '')
write.csv(ordered_TBSS,orderTBSS_dat)
# create an empty dataframe called design_mat
design_mat <- as.data.frame(matrix(ncol = 4, nrow = 53))
# 4 columns will represent the 4 EVs for the TBSS design matrix:
#   1 = High CRP
#   2 = Low CRP
#   3 = mean-centered age
#   4 = mean-centered sex
# for col 1 (High CRP):
# for assigning these values, you need to know how many subjects were  High CRP vs. Low CRP
# assign the first 38 rows (1st 38 subjects) a 1, indicating they're in High CRP group
design_mat[1:38, 1] <- 1
# assign the subjects 39:53 a 0, indicating they're not in High CRP group
design_mat[39:53, 1] <- 0
View(design_mat)
View(design_mat)
# for col 2 (NoMatHxDepr):
# for our design, this is just the reverse of col 1
# assign the first 38 rows (1st 38 subjects) a 0, indicating they're not in High CRP group
design_mat[1:38, 2] <- 0
# assign the subjects 39:53 a 1, indicating they're in Low CRP group
design_mat[39:53, 2] <- 1
# check the # of rows of design_mat
nrow(design_mat)
# for col 3 (mean-centered age):
design_mat[ , 3] <- ordered_TBSS$Age_c
# here is some guidance for demeaning sex or other binary predictors
# https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/GLM#Two_Groups_with_continuous_covariate_interaction
# for col 4 (mean-centered sex_code):
design_mat[ , 4] <- ordered_TBSS$Sex_c
path_out2 = "/Volumes/T8/Tread/Adult_DTI/1_Behav_Dat/1_DesignFiles1/"
design_mat_file = paste(path_out2, 'design_mat.txt', sep = '')
write.table(design_mat,design_mat_file, row.names=FALSE, col.names=FALSE)
############################################################################################################
# Make the design contrast file
############################################################################################################
# create a dataframe called design_con
design_con <- as.data.frame(matrix(ncol = 4, nrow = 6))
design_con[,] <- 0
design_con[1,1] <- 1
design_con[1,2] <- -1
design_con[2,2] <- 1
design_con[2,1] <- -1
design_con[3,3] <- 1
design_con[4,3] <- -1
design_con[5,4] <- 1
design_con[6,4] <- -1
# the first row of the contrast files means: Find voxels w/ more FA High CRP > Low CRP, controlling for age & sex
# the second row of the contrast files means: Find voxels w/ more FA Low CRP > High CRP, controlling for age & sex
# the third row of the contrast files means: Find a positive correlation with the third variable (mean-centered age), controlling for the other variables.
# the fourth row of the contrast files means: Find a negative correlation with the third variable (mean-centered age), controlling for the other variables.
# the fifth row of the contrast files means: Find a positive correlation with the forth variable (sex; 1 = female), controlling for the other variables.
# the sixth row of the contrast files means: Find a negative correlation with the forth variable (sex; 1 = female), controlling for the other variables.
design_con_file = paste(path_out2, 'design_con.txt', sep = '')
write.table(design_con,design_con_file, row.names=FALSE, col.names=FALSE)
library(dplyr)
library(tidyverse)
library("haven")
library(lubridate)
#install.packages("readxl")
library("readxl")
#import Play or Pass raw data
# NOTE: before I saved these as .xlsx files, I converted 'SessionDate' to format:  2015-10-23, to work with lubridate
AB <- read_excel("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/0_Raw/AB/Merged_AB.xlsx")
AB <- as.data.frame(AB)
#import Play or Pass raw data
# NOTE: before I saved these as .xlsx files, I converted 'SessionDate' to format:  2015-10-23, to work with lubridate
AB <- read_excel("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/0_Raw/AB/Merged_AB.xlsx")
BD <- read_excel("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/0_Raw/BD/Merged_BD.xlsx")
names(AB)
length(unique(AB$Subject)) #44
length(unique(BD$Subject)) #44
AB <- as.data.frame(AB)
# Remove every row (3 per sub) where AB$Procedure != "Knowledge"
# currently, 5412 rows. subtract 3 knowledge row x 44 subs = 5280 rows remaining
AB <- subset(AB, Procedure!="Knowledge")
BD <- as.data.frame(BD)
# Remove every row (3 per sub) where Procedure != "Knowledge"
# currently, 5412 rows. subtract 3 knowledge row x 44 subs = 5280 rows remaining
BD <- subset(BD, Procedure!="Knowledge")
# import questionnaire data
Sess1_Q <- read_sav("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/0_Raw/MergedQuest_3.21.16-Session1.sav")
Sess2_Q <- read_sav("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/0_Raw/MergedQuest_3.21.16-Session2.sav")
# subset out just subjects from this study
Sess1_Q <- subset(Sess1_Q, ID >= 2049)
Sess2_Q <- subset(Sess2_Q, ID >= 2049)
length(unique(Sess1_Q$ID)) #51
length(unique(Sess2_Q$ID)) #41
Version <- read_sav("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/0_Raw/IGT_VersionTrackingSheet.sav")
names(Version)
Version <- subset(Version, SubjectID >= 2049)
Version <- subset(Version, SubjectID != 2059) # took out this sub b/c they played old IGT
Version <- subset(Version, SubjectID != 2083) # took out this sub b/c they had no task data
# create a subject list
IGT_PP_Subs <- unique(Version$SubjectID)
# should be 49 subs long
# look for differences in the Sess 1 sub numbers in the task vs. questionnaire data
setdiff((unique(AB$Subject)), (unique(Sess1_Q$ID)))   # diff is 4050
# set x to index all rows where Subject == 4050
x <- which(AB$Subject==4050)
# change subject ID 4050 to 2050
AB$Subject[x] <- 2050
# look for differences in the Sess 2 sub numbers in the task vs. questionnaire data
setdiff((unique(BD$Subject)), (unique(Sess2_Q$ID)))  # diffs are 20783  2090  2093  2096  2098
# change sub 20783 to 2078 b/c their task participation date matches sub 2078 questionnaire participation date for Sess2
x <- which(BD$Subject==20783)
BD$Subject[x] <- 2078
setdiff((unique(Sess1_Q$ID)), (unique(AB$Subject))) # 2059 2083 2090 2093 2094 2096 2098
# sub 2059 completed the old IGT task and so is not part of this study
# I believe subs 2083 2090 2093 2094 2096 2098 completed BD at Sess 1 and did not complete IGT at Sess 2
AB$cardname
AB <- mutate(AB, stim = recode(cardname, 'A'= 1, 'B' = 2, 'C' = 3, 'D' = 4))
BD$cardname
BD <- mutate(BD, stim = recode(cardname, 'A'= 3, 'B' = 1, 'C' = 4, 'D' = 2))
# create a new variable called Srewlos that recodes for the sign of the  reward/loss in absmoney1
# webpage on conditional recoding:  https://rpubs.com/prlicari13/541675
AB$Srewlos[AB$absmoney1 < 0 ] <- -1
AB$Srewlos[AB$absmoney1 > 0 ] <- 1
AB$Srewlos[AB$absmoney1 == 0 ] <- 0
# Change all the na's to 0
AB$Srewlos[is.na(AB$Srewlos)] <- 0
BD$Srewlos[BD$absmoney1 < 0 ] <- -1
BD$Srewlos[BD$absmoney1 > 0 ] <- 1
BD$Srewlos[BD$absmoney1 == 0 ] <- 0
# Change all the na's to 0
BD$Srewlos[is.na(BD$Srewlos)] <- 0
# now recode absmoney1 into a new variable called rewlos that is the value of absmoney1
AB$rewlos <- AB$absmoney1
AB$rewlos[is.na(AB$rewlos)] <- 0
BD$rewlos <- BD$absmoney1
BD$rewlos[is.na(BD$rewlos)] <- 0
# recode card.RESP (where Play (1) or Pass(3))to a new variable called ydata,
# where 1 for play or 2 for pass, & NAs are recoded to 0
AB$ydata[AB$card.RESP == 3 ] <- 2
AB$ydata[AB$card.RESP == 1 ] <- 1
# Change all the na's to 2
AB$ydata[is.na(AB$ydata)] <- 2
BD$ydata[BD$card.RESP == 3 ] <- 2
BD$ydata[BD$card.RESP == 1 ] <- 1
# Change all the na's to 2
BD$ydata[is.na(BD$ydata)] <- 2
# create empty dataframes for the Sess 1 & Sess 2 task data
Sess1_IGT <- Sess2_IGT <- data.frame(Subject=integer(),
ExperimentName=character(),
absmoney1=integer(),
rewlos=integer(),
Srewlos=integer(),
card.RESP=integer(),
ydata=integer(),
cardname=integer(),
stim=integer()
)
# fill Sess1_IGT & Sess2_IGT with each subject's appropriate task data (based on AB_BD_diff)
subj_ids <- IGT_PP_Subs
n_subj <- length(subj_ids)
# Subject loop
for (i in 1:n_subj) {
# subset & check the AB data
tmpAB <- subset(AB, Subject==subj_ids[i])
AB_date <- ymd(tmpAB$SessionDate[1])
if (nrow(tmpAB) > 0) {
tmpAB <- tmpAB[,c("Subject", "ExperimentName", "absmoney1", "rewlos", "Srewlos", "card.RESP", "ydata", "cardname", "stim")]
AB_dat <- TRUE }
else if (nrow(tmpAB) == 0) {
AB_dat <- FALSE }
# subset & check the BD data
tmpBD <- subset(BD, Subject==subj_ids[i])
BD_date <- ymd(tmpBD$SessionDate[1])
if (nrow(tmpBD) > 0) {
tmpBD <- tmpBD[,c("Subject", "ExperimentName", "absmoney1", "rewlos", "Srewlos", "card.RESP", "ydata", "cardname", "stim")]
BD_dat <- TRUE }
else if (nrow(tmpBD) == 0) {
BD_dat <- FALSE }
# so now I have the sub's AB & BD data, a date for each session, & a TRUE/FALSE for whether they have data
# pick which data belongs to Sess1 & Sess2 dataframes based on AB_date & BD_date & TRUE/FALSE for whether they have data
if (AB_dat == TRUE && BD_dat == TRUE) {
if (AB_date < BD_date) {
Sess1_IGT <- rbind(Sess1_IGT, tmpAB)
Sess2_IGT <- rbind(Sess2_IGT, tmpBD) }
else if (BD_date < AB_date) {
Sess1_IGT <- rbind(Sess1_IGT, tmpBD)
Sess2_IGT <- rbind(Sess2_IGT, tmpAB) }}
else if (AB_dat == TRUE && BD_dat == FALSE) {
Sess1_IGT <- rbind(Sess1_IGT, tmpAB) }
else if (AB_dat == FALSE && BD_dat == TRUE) {
Sess1_IGT <- rbind(Sess1_IGT, tmpBD) }
}
length(unique(Sess1_IGT$Subject)) # 49 subs
length(unique(Sess2_IGT$Subject)) # 39 subs
############################################################################################################
# Save IGT dataframes as .csv files
############################################################################################################
path_out <- "/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/1_Preprocessed/"
Sess1_IGT_dat = paste(path_out, 'Sess1_IGT.csv', sep = '')
write.csv(Sess1_IGT,Sess1_IGT_dat)
Sess2_IGT_dat = paste(path_out, 'Sess2_IGT.csv', sep = '')
write.csv(Sess2_IGT,Sess2_IGT_dat)
Sess_data <- Sess1_IGT
#Sess_data <- Sess2_IGT
# Individual Subjects
subjList <- unique(Sess_data$Subject) # list of subject IDs from the session data specified by Sess_data
numSubjs <- length(subjList)        # number of subjects
# Trials per subject in behavioral data (0 when missing)
Tsubj <- as.vector(rep(0, numSubjs))
# now use these for loops to fill the array 'Tsubj' with the number of trials, when there are trials, otherwise the value stays 0
# Trials per subject in behavioral data
# number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj  <- subjList[i]
Tsubj[i] <- sum(Sess_data$Subject==curSubj)
}
maxTrials <- max(Tsubj)
# Behavioral data arrays
RLmatrix <- SRLmatrix <- stim <- array(-1, c(numSubjs, maxTrials))
Ydata <- array(-1, c(numSubjs, maxTrials))
# Filling arrays with raw data
for (i in 1:numSubjs) {
currID   <- subjList[i]
tmp_dat  <- subset(Sess_data, Subject==currID)
stim[i,]  <- tmp_dat$stim
Ydata[i,] <- tmp_dat$ydata
RLmatrix[i,] <- tmp_dat$rewlos
SRLmatrix[i,] <- tmp_dat$Srewlos
}
dataList <- list(
N       = numSubjs,
T       = maxTrials,
Tsubj   = Tsubj,
stim    = stim,
Srewlos = SRLmatrix,
rewlos  = RLmatrix,
ydata   = Ydata,
subjID  = subjList
)
# save Sess 1 lists as .rds
saveRDS(dataList, file = "/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/1_Preprocessed/Sess1.rds")
#Sess_data <- Sess1_IGT
Sess_data <- Sess2_IGT
# Individual Subjects
subjList <- unique(Sess_data$Subject) # list of subject IDs from the session data specified by Sess_data
numSubjs <- length(subjList)        # number of subjects
# Trials per subject in behavioral data (0 when missing)
Tsubj <- as.vector(rep(0, numSubjs))
# now use these for loops to fill the array 'Tsubj' with the number of trials, when there are trials, otherwise the value stays 0
# Trials per subject in behavioral data
# number of trials for each subject
for ( i in 1:numSubjs )  {
curSubj  <- subjList[i]
Tsubj[i] <- sum(Sess_data$Subject==curSubj)
}
maxTrials <- max(Tsubj)
# Behavioral data arrays
RLmatrix <- SRLmatrix <- stim <- array(-1, c(numSubjs, maxTrials))
Ydata <- array(-1, c(numSubjs, maxTrials))
# Filling arrays with raw data
for (i in 1:numSubjs) {
currID   <- subjList[i]
tmp_dat  <- subset(Sess_data, Subject==currID)
stim[i,]  <- tmp_dat$stim
Ydata[i,] <- tmp_dat$ydata
RLmatrix[i,] <- tmp_dat$rewlos
SRLmatrix[i,] <- tmp_dat$Srewlos
}
dataList <- list(
N       = numSubjs,
T       = maxTrials,
Tsubj   = Tsubj,
stim    = stim,
Srewlos = SRLmatrix,
rewlos  = RLmatrix,
ydata   = Ydata,
subjID  = subjList
)
# save Sess 2 lists as .rds
saveRDS(dataList, file = "/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/1_Preprocessed/Sess2.rds")
# Package for fitting .stan
library(rstan)
library(hBayesDM)
library(bayesplot)
# working directory for running on lab server
# working directory for running on my laptop
setwd("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/")
##########################################################################################
# fit Sess 1 data in a single timepoint model
##########################################################################################
# Read in stan-ready data for single sess play pass ORL model
stan_dat <- readRDS("Data/1_Preprocessed/Sess1.rds")
# working directory for running on my laptop
setwd("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/")
##########################################################################################
# fit Sess 1 data in a single timepoint model
##########################################################################################
# Read in stan-ready data for single sess play pass ORL model
stan_dat <- readRDS("Data/1_Preprocessed/Sess1.rds")
# Compile model
orl_pp_sep1 <- stan_model("Code/Stan/igt_orl.stan")
# Fit model
fit_sep <- sampling(orl_pp_sep1,
data   = stan_dat,
iter   = 5000,
warmup = 1000,
chains = 6,
cores  = 4,
seed   = 43210)
#save the fitted model as an .rds file
filename = "/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/orl_pp_sess1.rds"
saveRDS(fit_sep, filename)
# to read the .rds file back into R later, you do:
fit_sep <- readRDS("Data/2_Fitted/orl_pp_sess1.rds")
# Extract parameters
pars <- extract(fit_sep)
rhat(fit_sep)
plot(fit_sep, type = "trace")
# compute posterior means for different pars for each person, and then combine into
# data.frame with another column indicating their respective IDs
IGT_PP_sep_sess1 <- data.frame(subjID  = stan_dat$subjID,
Fit_sep_sess1_Arew = colMeans(pars$Arew[,]), # posterior means for session 1
Fit_sep_sess1_Apun = colMeans(pars$Apun[,]),
Fit_sep_sess1_K = colMeans(pars$K[,]),
Fit_sep_sess1_betaF = colMeans(pars$betaF[,]),
Fit_sep_sess1_betaP = colMeans(pars$betaP[,]))
# posterior means for parameter mu's
Fit_sep_sess1_mu_Arew = mean(pars$mu_Arew) # 4.413799e-05
Fit_sep_sess1_mu_Apun = mean(pars$mu_Apun) # 0.2942344
Fit_sep_sess1_mu_K = mean(pars$mu_K)  # 0.06355643
Fit_sep_sess1_mu_betaF = mean(pars$mu_betaF)  # 1.440315
Fit_sep_sess1_mu_betaP = mean(pars$mu_betaP)  # 0.8714947
Fit_sep_sess1_mu_Arew
Fit_sep_sess1_mu_Apun
Fit_sep_sess1_mu_K
Fit_sep_sess1_mu_betaF
Fit_sep_sess1_mu_betaP
#save the pars dataset
write.csv(IGT_PP_sep_sess1,'/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/IGT_PP_sep_sess1_IndPars.csv')
# Read in stan-ready data for single sess play pass ORL model
stan_dat <- readRDS("Data/1_Preprocessed/Sess2.rds")
# Compile model
orl_pp_sep2 <- stan_model("Code/Stan/igt_orl.stan")
# Fit model
fit_sep <- sampling(orl_pp_sep2,
data   = stan_dat,
iter   = 5000,
warmup = 1000,
chains = 6,
cores  = 4,
seed   = 43210)
#save the fitted model as an .rds file
filename = "/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/orl_pp_sess2.rds"
saveRDS(fit_sep, filename)
# to read the .rds file back into R later, you do:
fit_sep <- readRDS("Data/2_Fitted/orl_pp_sess2.rds")
# Extract parameters
pars <- extract(fit_sep)
rhat(fit_sep)
plot(fit_sep, type = "trace")
plot(fit_sep, type = "trace")
# compute posterior means for different pars for each person, and then combine into
# data.frame with another column indicating their respective IDs
IGT_PP_sep_sess2 <- data.frame(subjID  = stan_dat$subjID,
Fit_sep_sess2_Arew = colMeans(pars$Arew[,]), # posterior means for session 2
Fit_sep_sess2_Apun = colMeans(pars$Apun[,]),
Fit_sep_sess2_K = colMeans(pars$K[,]),
Fit_sep_sess2_betaF = colMeans(pars$betaF[,]),
Fit_sep_sess2_betaP = colMeans(pars$betaP[,]))
# posterior means for parameter mu's
Fit_sep_sess2_mu_Arew = mean(pars$mu_Arew) # 0.001546311
Fit_sep_sess2_mu_Apun = mean(pars$mu_Apun) # 0.1804044
Fit_sep_sess2_mu_K = mean(pars$mu_K)  # 0.7626441
Fit_sep_sess2_mu_betaF = mean(pars$mu_betaF)  # 1.200681
Fit_sep_sess2_mu_betaP = mean(pars$mu_betaP)  # 1.243643
Fit_sep_sess2_mu_Arew
Fit_sep_sess2_mu_Apun
Fit_sep_sess2_mu_K
Fit_sep_sess2_mu_betaF = mean(pars$mu_betaF)
Fit_sep_sess2_mu_betaF
Fit_sep_sess2_mu_betaP
#save the pars dataset
write.csv(IGT_PP_sep_sess2,'/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/IGT_PP_sep_sess2_IndPars.csv')
Sess1 <- read.csv("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/IGT_PP_sep_sess1_IndPars.csv")
Sess2 <- read.csv("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/IGT_PP_sep_sess2_IndPars.csv")
Sess1 <- read.csv("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/IGT_PP_sep_sess1_IndPars.csv")
Sess2 <- read.csv("/Users/tuo09169/Dropbox/1_Comp_Modelling/1_IGT_PlayPass/IGT_PP_Shared/Data/2_Fitted/IGT_PP_sep_sess2_IndPars.csv")
# merge the data by subjID
BothSess <- merge(Sess1,Sess2,by="subjID")
cor(BothSess$Fit_sep_sess1_Arew, BothSess$Fit_sep_sess2_Arew)
cor(BothSess$Fit_sep_sess1_Apun, BothSess$Fit_sep_sess2_Apun)
cor(BothSess$Fit_sep_sess1_K, BothSess$Fit_sep_sess2_K)
cor(BothSess$Fit_sep_sess1_betaF, BothSess$Fit_sep_sess2_betaF)
cor(BothSess$Fit_sep_sess1_betaP, BothSess$Fit_sep_sess2_betaP)
summary(BothSess$Fit_sep_sess1_Arew)
summary(BothSess$Fit_sep_sess2_Arew)
summary(BothSess$Fit_sep_sess1_betaP)
summary(BothSess$Fit_sep_sess2_betaP)
hist(Sess1$Fit_sep_sess1_betaP, breaks = 49)
hist(BothSess$Fit_sep_sess2_betaP, breaks = 39)
cor(BothSess$Fit_sep_sess1_K, BothSess$Fit_sep_sess2_K)
